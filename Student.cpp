//Name:  Dan Haub
//Student ID#:  2315346
//Chapman Email:  haub@chapman.edu
//Name:  Scott Cummings
//Student ID#:  2317991
//Chapman Email:  scummings@chapman.edu
//Course Number and Section:  CPSC 350-01
//Assignment:  5 - School Database

#include "Student.h"

using namespace std;
/*
a) default student constuctor
b) @param: none
c) @return: NA
d) no exceptions thrown
*/
Student::Student(){
    this->advisorID = 0;
    this->GPA = -1;
    this->id = 0;
    this->name = "N/A";
    this->rank = -1;
    this->specialization = "N/A";
}

/*
a) student overloaded constructor for the PrintStudent function
b) @param: int id - an integer value representing the student's ID number
c) @return: NA
d) no exceptions thrown
*/
Student::Student(int id){
    this->id = id;
    this->GPA = -1;
    this->advisorID = 0;
    this->name = "N/A";
    this->rank = -1;
    this->specialization = "N/A";
}

/*
a) Student overloaded constructor
b) @param: int ID - an int value representing the student's ID number | float GPA - a float value representing the student's GPA | int advisorID - an int value representing the student's advisor's ID | string name - a string value representing the student's name | short rank - a short value representing the student's year at the university | string specialization - a string value representing the student's major
c) @return: NA
d) no exceptions thrown
*/
Student::Student(int ID, float GPA, int advisorID, string name, short rank, string specialization){
    this->advisorID = advisorID;
    this->GPA = GPA;
    this->id = ID;
    this->name = name;
    this->rank = rank;
    this->specialization = specialization;
}

/*
a) Student destructor
b) @param: none
c) @return: NA
d) no exceptions thrown
*/
Student::~Student(){
    //nothing needs to happen here
}

/*
a) returns a serialized string representation the Student object
b) @param: none
c) @return: string - a representation of the Student
d) no exceptions thrown
*/
string Student::Serialize(){
    string str = "{";
    str += "\"id\":" + to_string(id) + ",";
    str += "\"name\":\"" + name + "\",";
    str += "\"rank\":" + to_string(rank) + ",";
    str += "\"specialization\":\"" + specialization + "\",";
    str += "\"GPA\":" + to_string(GPA) + ",";
    str += "\"advisorID\":" + to_string(advisorID) + "}";
    
    return str;
}

/*
a) returns a Student object parced from an input string
b) @param: string str - a string that should have been generated by Faculty::Serialize()
c) @return: Student - an instance of Student with data obtained from str
d) UnserializationException thrown
*/
Student Student::Unserialize(string str) throw (UnserializeException){
    GenStack<char> *delim = new GenStack<char>();

    //Stores values used to create new student
    int id = -1;
    string name = "";
    short rank = -1;
    string specialization = "";
    float GPA = -1;
    int advisorID = -1;

    //Traverses entire student string
    for(int i = 0; i < str.length(); i++){
        //if the first character is not an open brace and the last character is not a close brace, throw an error
        if((i == 0 && str[i] != '{') && (str[str.length()-1] != '}')){
            throw UnserializeException("Unserialization of student failed: invalid input string");
        }

        //Tests the current character for delimiters
        else if((str[i] == '{')  || (str[i] == '\"' & (!delim->isEmpty() && (delim->peek() != '\"')))){
            delim->push(str[i]);
        }

        //Once the start of a new member variable is found, traverse it
        else if(delim->peek() == '\"'){
            //will be the name of the member variable
            string thisString = "";

            //collect characters until the close quote
            while(str[i] != '\"'){
                if(i >= str.length()){
                    throw UnserializeException("Unserialization of student failed: invalid input string");
                }
                thisString += str[i++];
            }

            //removes the quote from the delimiter stack
            delim->pop();

            //checks to see if the next character is a colon (it should be)
            if(str[i+1] == ':'){
                //move past the colon
                i += 2;

                //gets the id of the new student
                if(thisString == "id"){
                    string idString = "";

                    //collect numeric characters until the next member variable starts at the comma
                    while(str[i] != ','){
                        //protects against going beyond the scope of the string
                        if(i >= str.length()){
                            throw UnserializeException("Unserialization of student failed: invalid input string");
                        }
                        idString += str[i++];
                    }

                    //try to parse the collected characters
                    try{
                        id = stoi(idString);
                    }
                    catch(invalid_argument e){
                        throw UnserializeException("Unserialization of student failed: invalid input string");
                    }
                }

                //Gets the name of the new student
                else if(thisString == "name"){
                    string nameString = "";

                    //check if the next character is a quote (which it should be)
                    if(str[i++] == '\"'){
                        //collects characters until the close quote
                        while(str[i] != '\"'){
                            //protects against going beyond the scope of the string
                            if(i >= str.length()){
                                throw UnserializeException("Unserialization of student failed: invalid input string");
                            }
                            nameString += str[i++];
                        }

                        i++;

                        //makes sure things are happening in order
                        if(str[i] != ','){
                            throw UnserializeException("Unserialization of student failed: invalid input string");
                        }
                    }
                    //otherwise throws an error
                    else{
                        throw UnserializeException("Unserialization of student failed: invalid input string");
                    }
                    name = nameString;
                }

                //gets the rank of the student
                else if(thisString == "rank"){
                    string rankString = "";
                    while(str[i] != ','){
                        //protects against going beyond the scope of the string
                        if(i >= str.length()){
                            throw UnserializeException("Unserialization of student failed: invalid input string");
                        }
                        rankString += str[i++];
                    }

                    rank = (short)stoi(rankString);
                }
                
                //Gets the major of the student
                else if(thisString == "specialization"){
                    string specializationString = "";
                    if(str[i++] == '\"'){
                        while(str[i] != '\"'){
                            //protects against going beyond the scope of the string
                            if(i >= str.length()){
                                throw UnserializeException("Unserialization of student failed: invalid input string");
                            }
                            specializationString += str[i++];
                        }

                        i++;
                        if(str[i] != ','){
                            throw UnserializeException("Unserialization of student failed: invalid input string");
                        }
                    }
                    else{
                        throw UnserializeException("Unserialization of student failed: invalid input string");
                    }
                    specialization = specializationString;
                }

                //gets the GPA of the student
                else if(thisString == "GPA"){
                    string gpaString = "";
                    while(str[i] != ','){
                        //protects against going beyond the scope of the string
                        if(i >= str.length()){
                            throw UnserializeException("Unserialization of student failed: invalid input string");
                        }
                        gpaString += str[i++];
                    }

                    GPA = stof(gpaString);
                }

                //gets the advisor of the student
                else if(thisString == "advisorID"){
                    string advisorIDString = "";
                    while(str[i] != '}'){
                        //protects against going beyond the scope of the string
                        if(i >= str.length()){
                            throw UnserializeException("Unserialization of student failed: invalid input string");
                        }
                        advisorIDString += str[i++];
                    }

                    advisorID = stoi(advisorIDString);
                }
                continue;
            }

            //protects against unexpected cases
            else{
                throw UnserializeException("Unserialization of student failed: invalid input string");
            }
        }

        //Once the close brace shows up, break
        else if(str[i] == '}'){
            break;
        }

        //Any case not expected will throw an error
        else{
            throw UnserializeException("Unserialization of student failed: invalid input string");
        }
    }

    delete delim;

    //makes sure all data members have been filled
    if((id == -1)||(name == "")||(rank == -1)||(specialization == "")||(GPA == -1)||(advisorID == -1)){
        throw UnserializeException("Unserialization of student failed: invalid input string");
    }

    //creates the new student
    Student someStudent(id,GPA,advisorID,name,rank,specialization);
    
    return someStudent;
}

/*
a) accessor for the student's advisor's ID
b) @param: none
c) @return: int - an integer value representing the student's advisor's ID
d) no exceptions thrown
*/
int Student::GetAdvisorID(){
    return advisorID;
}

/*
a) the accessor for the student's GPA
b) @param: none
c) @return: float - a float value representing the student's GPA
d) no exceptions thrown
*/
float Student::GetGPA(){
    return GPA;
}

/*
a) mutator for the student's advisor's ID
b) @param: int advisorID - an integer value representing the new advisor's ID
c) @return: void
d) no exceptions thrown
*/
void Student::SetAdvisorID(int advisorID){
    this->advisorID = advisorID;
}

/*
a) mutator for the student's GPA
b) @param: float GPA - a float value representing the student's new GPA
c) @return: void
d) no exceptions thrown
*/
void Student::SetGPA(float GPA){
    this->GPA = GPA;
}

/*
a) accessor for the student's ID
b) @param: none
c) @return: int - an integer value representing the student's ID
d) no exceptions thrown
*/
int Student::GetID(){
    return id;
}

/*
a) accessor for the student's name
b) @param: None
c) @return: string - a string value representing the students name
d) no exceptions thrown
*/
string Student::GetName(){
    return name;
}
/*
a) accessor for the student's rank
b) @param: none
c) @return: string - a string value representing the student's year at the university
d) no exceptions thrown
*/
string Student::GetRank(){
    switch (rank){
        case 0:
            return "First Year";
            break;
        case 1:
            return "Second Year";
            break;
        case 2:
            return "Third Year";
            break;
        case 3:
            return "Fourth Year";
            break;
        default:
            return "Short did not equate to a string value";
            break;
    }
}

/*
a) accessor for the student's specialization
b) @param: None
c) @return: string - a string that represents the student's major
d) no exceptions thrown
*/
string Student::GetSpecialization(){
    return specialization;
}

/*
a) mutator for the student's year at the university
b) @param: short rank - a short value representing the student's year at the university
c) @return: void
d) no exceptions thrown
*/
void Student::SetRank(short rank){
    this->rank = rank;
}

/*
a) mutator for the student's Specialization (major)
b) @param: string specialization - a string value representing the student's new major
c) @return: void
*/
void Student::SetSpecialization(string specialization){
    this->specialization = specialization;
}

/*
a) overloaded stream insertion operator
b) @param: ostream& os - the address of an ostream, the object we use to print out the student | Student& - the address of the student object that we are printing out
c) @return: ostream& os - the address of the ostream that we used to print out the student objecy
d) no exceptions thrown
*/
ostream& operator<<(ostream& os, Student& s){
    os << s.ToString();
    return os;
}

/*
a) Student ToString function
b) @param: none
c) @return: string - a string value that has the most important aspects of the student object
d) no exceptions thrown
*/
string Student::ToString(){
    string stu = "";
    stu += "Student: " + to_string(id) + "\n";
    stu += name + "\n";
    stu += GetRank() + " in " + GetSpecialization() + "\n";
    stu += "Advisor ID: " + to_string(GetAdvisorID());

    return stu;
}
